
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mcast
 */
public class GUI extends javax.swing.JFrame {
   static gameMap myMap = new gameMap();
   static model myModel = new model();
   int cardNum = 0;
   int moves = 3;
   int currentPlayer = 0;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        this.setTitle("CECS BS in CS Game First Iteration");
        ScrollPane.getViewport().add(myMap, WIDTH);
        myMap.myModel = this.myModel;
        setRoomList();
        setStats();
        setCardImg();
        disableButtons();
        drawCardButton.setEnabled(true);
        currentPlayField.setText(info);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardImagePanel = new javax.swing.JLabel();
        playCardButton = new javax.swing.JButton();
        drawCardButton = new javax.swing.JButton();
        ScrollPane = new javax.swing.JScrollPane();
        moveButton = new javax.swing.JButton();
        roomListScrollPane = new javax.swing.JScrollPane();
        roomList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameStatsField = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentPlayField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cardImagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cardImagePanelMouseClicked(evt);
            }
        });

        playCardButton.setText("Play Card");
        playCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playCardButtonActionPerformed(evt);
            }
        });

        drawCardButton.setText("Draw Card");
        drawCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCardButtonActionPerformed(evt);
            }
        });

        ScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        ScrollPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        moveButton.setText("Move");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        roomListScrollPane.setViewportView(roomList);

        gameStatsField.setColumns(20);
        gameStatsField.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        gameStatsField.setRows(5);
        jScrollPane1.setViewportView(gameStatsField);

        currentPlayField.setColumns(20);
        currentPlayField.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        currentPlayField.setRows(5);
        jScrollPane2.setViewportView(currentPlayField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(drawCardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(playCardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(roomListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cardImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(27, 27, 27)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(drawCardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(playCardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomListScrollPane))
                    .addComponent(cardImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        if (moves > 0){
        int getRoom = myMap.myModel.players.get(0).roomNumber;
        int selectedRoom = getSelectedRoom();
        if (selectedRoom == -1){
            JOptionPane.showMessageDialog(null, "Please select a room");
            return;
        }else if(selectedRoom != -1){
        myMap.myModel.players.get(0).roomNumber = myMap.myModel.rooms.get(getRoom).adjacentRooms.get(getSelectedRoom()).intValue();
        
        setRoomList();
        myMap.paintComponent(myMap.getGraphics());
        setStats();
        moves -= 1;
        if (moves == 0){moveButton.setEnabled(false);}
    
        }
        }
    }//GEN-LAST:event_moveButtonActionPerformed

    private void cardImagePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cardImagePanelMouseClicked
        int cardsInHand = myModel.players.get(0).hand.size()-1;
        int currentCard = cardNum;
        
        if((currentCard+1) <= cardsInHand){
            cardNum += 1;
            setCardImg();   
        }else if(currentCard+1 > cardsInHand){
            cardNum = 0;
            setCardImg();
        }
    }//GEN-LAST:event_cardImagePanelMouseClicked

    private void drawCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCardButtonActionPerformed
        myModel.players.get(0).hand.add(myModel.deck.dealOneCard());
        drawCardButton.setEnabled(false);
        moves = 3;
        moveButton.setEnabled(true);
        playCardButton.setEnabled(true);
    }//GEN-LAST:event_drawCardButtonActionPerformed

    private void playCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playCardButtonActionPerformed
        boolean success =myModel.players.get(0).hand.get(cardNum).play(myModel.players.get(0));
        String message;
        if (success){ 
            message = myModel.players.get(0).name + " played " + myModel.players.get(0).hand.get(cardNum).name + " for " + myModel.players.get(0).hand.get(cardNum).reward+System.lineSeparator();
        } else {
            message = myModel.players.get(0).name + " played " + myModel.players.get(0).hand.get(cardNum).name + " failed"+System.lineSeparator();
        }
        setPlay(message);
        setStats();
        disableButtons();
        moves = 3;
        AITurn(1);
        AITurn(2);
        drawCardButton.setEnabled(true);
    }//GEN-LAST:event_playCardButtonActionPerformed
    public void setCardImg(){
        cardImagePanel.setIcon(myModel.players.get(0).hand.get(cardNum).getImage());
    }
    
    public int getSelectedRoom(){
        return roomList.getSelectedIndex();
    }
    
    public void AITurn(int i){
        myModel.players.get(i).hand.add(myModel.deck.dealOneCard());
        int room = myModel.players.get(i).roomNumber;
        myModel.players.get(i).roomNumber = myModel.rooms.get(room).adjacentRooms.get(0);//moves to closest adjacent room 
        boolean success = myModel.players.get(i).hand.get(0).play(myModel.players.get(i));//plays 1st card
        String message;
        if (success){ 
            message = myModel.players.get(i).name + " played " + myModel.players.get(i).hand.get(0).name + " for " + myModel.players.get(i).hand.get(0).reward +System.lineSeparator();
        } else {
            message = myModel.players.get(i).name + " played " + myModel.players.get(i).hand.get(0).name + " failed"+System.lineSeparator();
        }
        setPlay(message);
        setStats();
    }
    
    
    
    public void disableButtons(){
        moveButton.setEnabled(false);
        playCardButton.setEnabled(false);
        drawCardButton.setEnabled(false);
    }
    
    public void setRoomList(){
        
        player tempPlayer = myMap.myModel.players.get(0);
    
    int room = tempPlayer.getRoom();
    ArrayList<Integer> roomList = (myMap.myModel.rooms.get(room)).adjacentRooms;
    System.out.println(myMap.myModel.rooms.get(room).name);
    DefaultListModel adjacentRooms = new DefaultListModel();
    System.out.println(roomList.size());
    for (int i = 0; i < roomList.size(); i++) {
      adjacentRooms.addElement(myMap.myModel.rooms.get(roomList.get(i).intValue()).name);
      System.out.println(myMap.myModel.rooms.get(roomList.get(i).intValue()).name);
    }
    this.roomList.setModel(adjacentRooms);
    }
    String stats = "        Learning    Craft   Integrity   Quality Points " + System.lineSeparator();
    
    public void setStats(){
        for(int i = 0; i < 3 ; i++){
        stats += myModel.players.get(i).currentStats();
        }
        stats+= System.lineSeparator();
        stats += "Card in deck: "+ myModel.deck.deck.size() + "         Discards out of play: " + myModel.deck.discardDeck.size() + System.lineSeparator();
        stats += "You are: "+ myModel.players.get(0).name +" and you are in " + myModel.rooms.get(myModel.players.get(0).roomNumber).name;
        System.out.print(stats);
        gameStatsField.setText(stats);   
        stats = "        Learning    Craft   Integrity   Quality Points " + System.lineSeparator();
    }
    String info = "Human player is " + myModel.players.get(0).name + System.lineSeparator();
    public void setPlay(String s){
        info += s;
        currentPlayField.setText(info);
    }
    
    public void setHumanPlayerField(){
        String name = myMap.myModel.players.get(0).name;
        
    }
    
//    public void setLocationField(){
//       String name = myMap.myModel.players.get(0).name;
//       int myRoom = myMap.myModel.players.get(0).roomNumber;
//       String location = myMap.myModel.rooms.get(myRoom).name;
//       humanPlayerField.setText("You are "+name+" you are in room number "+myRoom+": "+location);
//    }
//    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUI myGUI = new GUI();
                myGUI.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JLabel cardImagePanel;
    private javax.swing.JTextArea currentPlayField;
    private javax.swing.JButton drawCardButton;
    private javax.swing.JTextArea gameStatsField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton moveButton;
    private javax.swing.JButton playCardButton;
    private javax.swing.JList<String> roomList;
    private javax.swing.JScrollPane roomListScrollPane;
    // End of variables declaration//GEN-END:variables
}
